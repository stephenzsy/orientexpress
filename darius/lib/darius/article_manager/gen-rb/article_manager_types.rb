#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module ColdBlossom
  module Darius
    module StatusCode
      UNKNOWN = 0
      SUCCESS = 1
      ERROR = 2
      FAULT = 3
      SCHEDULED = 4
      UNAVAILABLE = 5
      VALUE_MAP = {0 => "UNKNOWN", 1 => "SUCCESS", 2 => "ERROR", 3 => "FAULT", 4 => "SCHEDULED", 5 => "UNAVAILABLE"}
      VALID_VALUES = Set.new([UNKNOWN, SUCCESS, ERROR, FAULT, SCHEDULED, UNAVAILABLE]).freeze
    end

    module OutputType
      S3_ARN = 0
      JSON = 1
      TEXT = 2
      VALUE_MAP = {0 => "S3_ARN", 1 => "JSON", 2 => "TEXT"}
      VALID_VALUES = Set.new([S3_ARN, JSON, TEXT]).freeze
    end

    module DocumentType
      ARTICLE = 0
      DAILY_ARCHIVE_INDEX = 1
      RSS_FEED = 2
      VALUE_MAP = {0 => "ARTICLE", 1 => "DAILY_ARCHIVE_INDEX", 2 => "RSS_FEED"}
      VALID_VALUES = Set.new([ARTICLE, DAILY_ARCHIVE_INDEX, RSS_FEED]).freeze
    end

    module SchedulingOption
      DEFAULT = 0
      NONE = 1
      IMMEDIATELY = 2
      VALUE_MAP = {0 => "DEFAULT", 1 => "NONE", 2 => "IMMEDIATELY"}
      VALID_VALUES = Set.new([DEFAULT, NONE, IMMEDIATELY]).freeze
    end

    module CacheOption
      DEFAULT = 0
      NO_CACHE = 1
      ONLY_CACHE = 2
      REFRESH = 3
      VALUE_MAP = {0 => "DEFAULT", 1 => "NO_CACHE", 2 => "ONLY_CACHE", 3 => "REFRESH"}
      VALID_VALUES = Set.new([DEFAULT, NO_CACHE, ONLY_CACHE, REFRESH]).freeze
    end

    class GetOriginalDocumentRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VENDOR = 1
      DOCUMENTTYPE = 2
      DOCUMENTURL = 3
      DATETIME = 4
      OUTPUTTYPE = 5
      SCHEDULINGOPTION = 6
      CACHEOPTION = 7

      FIELDS = {
        VENDOR => {:type => ::Thrift::Types::STRING, :name => 'vendor'},
        DOCUMENTTYPE => {:type => ::Thrift::Types::I32, :name => 'documentType', :enum_class => ::ColdBlossom::Darius::DocumentType},
        DOCUMENTURL => {:type => ::Thrift::Types::STRING, :name => 'documentUrl'},
        DATETIME => {:type => ::Thrift::Types::STRING, :name => 'datetime'},
        OUTPUTTYPE => {:type => ::Thrift::Types::I32, :name => 'outputType', :enum_class => ::ColdBlossom::Darius::OutputType},
        SCHEDULINGOPTION => {:type => ::Thrift::Types::I32, :name => 'schedulingOption', :enum_class => ::ColdBlossom::Darius::SchedulingOption},
        CACHEOPTION => {:type => ::Thrift::Types::I32, :name => 'cacheOption', :enum_class => ::ColdBlossom::Darius::CacheOption}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @documentType.nil? || ::ColdBlossom::Darius::DocumentType::VALID_VALUES.include?(@documentType)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field documentType!')
        end
        unless @outputType.nil? || ::ColdBlossom::Darius::OutputType::VALID_VALUES.include?(@outputType)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field outputType!')
        end
        unless @schedulingOption.nil? || ::ColdBlossom::Darius::SchedulingOption::VALID_VALUES.include?(@schedulingOption)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field schedulingOption!')
        end
        unless @cacheOption.nil? || ::ColdBlossom::Darius::CacheOption::VALID_VALUES.include?(@cacheOption)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field cacheOption!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetOriginalDocumentResult
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STATUSCODE = 1
      TIMESTAMP = 2
      DOCUMENT = 3

      FIELDS = {
        STATUSCODE => {:type => ::Thrift::Types::I32, :name => 'statusCode', :enum_class => ::ColdBlossom::Darius::StatusCode},
        TIMESTAMP => {:type => ::Thrift::Types::STRING, :name => 'timestamp'},
        DOCUMENT => {:type => ::Thrift::Types::STRING, :name => 'document'}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @statusCode.nil? || ::ColdBlossom::Darius::StatusCode::VALID_VALUES.include?(@statusCode)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field statusCode!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ServiceException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STATUSCODE = 1
      MESSAGE = 2

      FIELDS = {
        STATUSCODE => {:type => ::Thrift::Types::I32, :name => 'statusCode', :enum_class => ::ColdBlossom::Darius::StatusCode},
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @statusCode.nil? || ::ColdBlossom::Darius::StatusCode::VALID_VALUES.include?(@statusCode)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field statusCode!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
