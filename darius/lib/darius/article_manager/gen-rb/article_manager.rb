#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'article_manager_types'

module ColdBlossom
  module Darius
    module ArticleManager
      class Client
        include ::Thrift::Client

        def health()
          send_health()
          return recv_health()
        end

        def send_health()
          send_message('health', Health_args)
        end

        def recv_health()
          result = receive_message(Health_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'health failed: unknown result')
        end

        def version()
          send_version()
          return recv_version()
        end

        def send_version()
          send_message('version', Version_args)
        end

        def recv_version()
          result = receive_message(Version_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'version failed: unknown result')
        end

        def getDocument(request)
          send_getDocument(request)
          return recv_getDocument()
        end

        def send_getDocument(request)
          send_message('getDocument', GetDocument_args, :request => request)
        end

        def recv_getDocument()
          result = receive_message(GetDocument_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getDocument failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_health(seqid, iprot, oprot)
          args = read_args(iprot, Health_args)
          result = Health_result.new()
          result.success = @handler.health()
          write_result(result, oprot, 'health', seqid)
        end

        def process_version(seqid, iprot, oprot)
          args = read_args(iprot, Version_args)
          result = Version_result.new()
          result.success = @handler.version()
          write_result(result, oprot, 'version', seqid)
        end

        def process_getDocument(seqid, iprot, oprot)
          args = read_args(iprot, GetDocument_args)
          result = GetDocument_result.new()
          begin
            result.success = @handler.getDocument(args.request)
          rescue ::ColdBlossom::Darius::ServiceException => e
            result.e = e
          end
          write_result(result, oprot, 'getDocument', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Health_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Health_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Version_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Version_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetDocument_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST = 1

        FIELDS = {
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ColdBlossom::Darius::GetDocumentRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetDocument_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ColdBlossom::Darius::GetDocumentResult},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ColdBlossom::Darius::ServiceException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
